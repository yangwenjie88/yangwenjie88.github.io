<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Kafka源码分析 Consumer系列之Heartbeat</title>
    <url>/2022/03/02/Kafka%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Consumer%E4%B9%8BHeartbeat/</url>
    <content><![CDATA[<h4 id="Kafka源码分析-Consumer系列之Heartbeat"><a href="#Kafka源码分析-Consumer系列之Heartbeat" class="headerlink" title="Kafka源码分析 Consumer系列之Heartbeat"></a>Kafka源码分析 Consumer系列之Heartbeat</h4><p>消费者心跳是consumer client 端定时向kafka服务端发起心跳，用于检测消费者状态是否正常的机制。一旦在一个心跳过期周期内(默认10s)，Broker端的消费组组协调器(GroupCoordinator)会把消费者从消费组中移除，从而触发重平衡</p>
<h5 id="客户端源码"><a href="#客户端源码" class="headerlink" title="客户端源码"></a>客户端源码</h5><p>主要的三个参数</p>
<p>    heartbeat.interval.ms 心跳间隔，多长时间发起一次心跳，默认值3s</p>
<p>    session.timeout.ms  一个周期内至少要有一次心跳，默认值10s</p>
<p>     max.poll.interval.ms poll的最大间隔，默认值300s</p>
<p>客户端的心跳是由HeartbeatThread 类完成的，HeartbeatThread 是 AbstractCoordinator 的一个内部类，继承了KafkaThread, 本质是一个线程类。HeartbeatThread的创建是在第一次poll的时候，updateAssignmentMetadataIfNeeded 元数据更新里面。消费者需要找到对应的协调者才能发送心跳线程，创建函数的调用方是AbstractCoordinator类中的ensureActiveGroup函数。</p>
<span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">ensureActiveGroup</span><span class="params">(<span class="keyword">final</span> Timer timer)</span> &#123;</span><br><span class="line">        <span class="comment">// always ensure that the coordinator is ready because we may have been disconnected</span></span><br><span class="line">        <span class="comment">// when sending heartbeats and does not necessarily require us to rejoin the group.</span></span><br><span class="line">        <span class="keyword">if</span> (!ensureCoordinatorReady(timer)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        startHeartbeatThreadIfNeeded();</span><br><span class="line">        <span class="keyword">return</span> joinGroupIfNeeded(timer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">startHeartbeatThreadIfNeeded</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (heartbeatThread == <span class="literal">null</span>) &#123;</span><br><span class="line">            heartbeatThread = <span class="keyword">new</span> <span class="title class_">HeartbeatThread</span>();</span><br><span class="line">            heartbeatThread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">HeartbeatThread</span> <span class="keyword">extends</span> <span class="title class_">KafkaThread</span> <span class="keyword">implements</span> <span class="title class_">AutoCloseable</span> &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;Heartbeat thread started&quot;</span>);</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (AbstractCoordinator.<span class="built_in">this</span>) &#123;</span><br><span class="line">                        ...省略部分代码...</span><br><span class="line"></span><br><span class="line">                        client.pollNoWakeup();</span><br><span class="line">                        <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> time.milliseconds();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (coordinatorUnknown()) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (findCoordinatorFuture != <span class="literal">null</span> || lookupCoordinator().failed())</span><br><span class="line">                                <span class="comment">// the immediate future check ensures that we backoff properly in the case that no</span></span><br><span class="line">                                <span class="comment">// brokers are available to connect to.</span></span><br><span class="line">                                AbstractCoordinator.<span class="built_in">this</span>.wait(rebalanceConfig.retryBackoffMs);</span><br><span class="line">                            <span class="comment">//获取服务端心跳响应超时，置为协调者未知，等待下一轮</span></span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (heartbeat.sessionTimeoutExpired(now)) &#123;</span><br><span class="line">                            <span class="comment">// the session timeout has expired without seeing a successful heartbeat, so we should</span></span><br><span class="line">                            <span class="comment">// probably make sure the coordinator is still healthy.</span></span><br><span class="line">                            markCoordinatorUnknown();</span><br><span class="line">                        <span class="comment">//心跳超时，处理上次消息的时间过长，导致长时间没有poll</span></span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (heartbeat.pollTimeoutExpired(now)) &#123;</span><br><span class="line">                            <span class="comment">// the poll timeout has expired, which means that the foreground thread has stalled</span></span><br><span class="line">                            <span class="comment">// in between calls to poll().</span></span><br><span class="line">                              maybeLeaveGroup(leaveReason);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!heartbeat.shouldHeartbeat(now)) &#123;</span><br><span class="line">                           </span><br><span class="line">                            <span class="comment">//还没到heartbeat间隔时间，wait等待，每次poll消息的时候会notify唤醒</span></span><br><span class="line">                            AbstractCoordinator.<span class="built_in">this</span>.wait(rebalanceConfig.retryBackoffMs);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            heartbeat.sentHeartbeat(now);</span><br><span class="line">                            <span class="keyword">final</span> RequestFuture&lt;Void&gt; heartbeatFuture = sendHeartbeatRequest();</span><br><span class="line">                            </span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;Heartbeat thread has closed&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h5><p>kafka服务端收到心跳请求之后（KafkaApis.handleDeleteGroupsRequest），由GroupCooridnator来处理，核心代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> def <span class="title function_">completeAndScheduleNextExpiration</span><span class="params">(group: GroupMetadata, member: MemberMetadata, timeoutMs: Long)</span>: Unit = &#123;</span><br><span class="line">    <span class="type">val</span> <span class="variable">memberKey</span> <span class="operator">=</span> MemberKey(member.groupId, member.memberId)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将hearbeatSatisfied设置为true，表示该消费者收到一个有效的心跳包。</span></span><br><span class="line">    member.heartbeatSatisfied = <span class="literal">true</span></span><br><span class="line">    <span class="comment">//收到一个有效的心跳包，通知定时调度器停止本次的心跳过期检测。</span></span><br><span class="line">    heartbeatPurgatory.checkAndComplete(memberKey)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构建一个DelayedHearbeat，进入下一个心跳检测周期。</span></span><br><span class="line">    member.heartbeatSatisfied = <span class="literal">false</span></span><br><span class="line">    <span class="type">val</span> <span class="variable">delayedHeartbeat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DelayedHeartbeat</span>(<span class="built_in">this</span>, group, member.memberId, isPending = <span class="literal">false</span>, timeoutMs)</span><br><span class="line">    heartbeatPurgatory.tryCompleteElseWatch(delayedHeartbeat, Seq(memberKey))</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>GroupMetadata group 消费组的元信息</p>
</li>
<li><p>MemberMetadata member 消费者的元信息。</p>
</li>
<li><p>long timeoutMs 心跳超时时间，默认为10s，这个参数是由消费端的<strong>session.timeout.ms</strong>参数设置，默认为10s</p>
</li>
</ul>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DelayedHeartbeat</span>(<span class="params">coordinator: <span class="type">GroupCoordinator</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">                                      group: <span class="type">GroupMetadata</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">                                      memberId: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">                                      isPending: <span class="type">Boolean</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">                                      timeoutMs: <span class="type">Long</span></span>)</span></span><br><span class="line">  <span class="keyword">extends</span> <span class="type">DelayedOperation</span>(timeoutMs, <span class="type">Some</span>(group.lock)) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">tryComplete</span></span>(): <span class="type">Boolean</span> = coordinator.tryCompleteHeartbeat(group, memberId, isPending, forceComplete _)</span><br><span class="line">  <span class="comment">//在session.timeout.ms时间内没有收到心跳请求</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">onExpiration</span></span>() = coordinator.onExpireHeartbeat(group, memberId, isPending)</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">onComplete</span></span>() = coordinator.onCompleteHeartbeat()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onExpireHeartbeat</span></span>(group: <span class="type">GroupMetadata</span>, memberId: <span class="type">String</span>, isPending: <span class="type">Boolean</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    group.inLock &#123;</span><br><span class="line">      <span class="keyword">if</span> (group.is(<span class="type">Dead</span>)) &#123;</span><br><span class="line">        info(<span class="string">s&quot;Received notification of heartbeat expiration for member <span class="subst">$memberId</span> after group <span class="subst">$&#123;group.groupId&#125;</span> had already been unloaded or deleted.&quot;</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isPending) &#123;</span><br><span class="line">        info(<span class="string">s&quot;Pending member <span class="subst">$memberId</span> in group <span class="subst">$&#123;group.groupId&#125;</span> has been removed after session timeout expiration.&quot;</span>)</span><br><span class="line">       </span><br><span class="line">       removePendingMemberAndUpdateGroup(group, memberId)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!group.has(memberId)) &#123;</span><br><span class="line">        debug(<span class="string">s&quot;Member <span class="subst">$memberId</span> has already been removed from the group.&quot;</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> member = group.get(memberId)</span><br><span class="line">        <span class="keyword">if</span> (!member.hasSatisfiedHeartbeat) &#123;</span><br><span class="line">          info(<span class="string">s&quot;Member <span class="subst">$&#123;member.memberId&#125;</span> in group <span class="subst">$&#123;group.groupId&#125;</span> has failed, removing it from the group&quot;</span>)</span><br><span class="line">          <span class="comment">////移除group member,触发重平衡 </span></span><br><span class="line">          removeMemberAndUpdateGroup(group, member, <span class="string">s&quot;removing member <span class="subst">$&#123;member.memberId&#125;</span> on heartbeat expiration&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>消费客户端在第一次poll的时候会启动HeartbeatThread线程，以3s一次的频率向GroupCooridator发起心跳请求。如果在session.timeout.ms时间内服务端没收到心跳请求，就会移除改group member,触发reblance。如果我们poll的消息过多或者处理消息的时间过长，那消费者就会长时间没有进行poll，这样就会导致消费者离开并触发reblance。每次poll的时候会重置hearbeat 的pollTime。所以我们实际消费场景要协调好这三个参数的配置</p>
]]></content>
      <categories>
        <category>kafka</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/02/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>文章标题</title>
    <url>/2022/02/15/%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
